{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            // C/C++ debug configuration for Launch
            "name": "C/C++ Launch",
            "type": "cppdbg",
            "request": "launch",

            // Configure VS Code's debugging behavior
            "targetArchitecture": "x64",
            "program": "${workspaceRoot}/build/bbc-microbit-classic-gcc/source/microbit-dal-ext-kit-example",   // <Required> Specify the module used for `-file-exec-and-symbols` on gdb.
            "externalConsole": true,
            "logging": {
                "exceptions": true,
                "moduleLoad": true,
                "programOutput": true,
                "engineLogging": false,
                "trace": false,
                "traceResponse": false
            },

            // Configure the target application
            "args": [],
            "cwd": "${workspaceRoot}",
            "environment": [],

            // Configure gdb and gdbserver for macOS
            "osx": {
                // Customizing GDB or LLDB
                "MIMode": "gdb",                                        // <Required> Use gdb.
                "miDebuggerPath": "/usr/local/bin/arm-none-eabi-gdb",   // <Required> Specify gdb executable. If a not-signed error is reported, use `codesign` utility to sign your signature to `arm-none-eabi-gdb` file.
                "miDebuggerArgs": "",
                "stopAtEntry": false,
                "setupCommands": [
                    { "text": "-target-select remote localhost:3333" },         // <Required> Connect to the debug server via port 3333.
                    { "text": "-interpreter-exec console \"monitor reset\"" },  // <Required> Reuqest the remote monitor to reset the processor.
                    { "text": "-interpreter-exec console \"monitor halt\"" }    // <Required> Reuqest the remote monitor to halt the processor.
                ],

                // Remote debugging or debugging with a local debugger server
                "debugServerPath": "${workspaceRoot}/../yotta-venv/bin/pyocd",  // <Required> Specify pyOCD executable. Use the new combined pyocd tool instead of `pyocd-gdbserver`.
                "debugServerArgs": "gdbserver",                                 // <Required> Run the gdb remote server.
                "serverStarted": "gdbserver:GDB server started on port 3333",   // <Required> Ensure that the debug server is running on port 3333.
                "filterStderr": true,                                           // <Required> Use stderr to look for serverStarted message.
                "filterStdout": false

                // Here is an example of initial gdb/mi commands generated on macOS using this configuration.
                //  -gdb-set target-async on
                //  -target-select remote localhost:3333
                //  -thread-info 1
                //  -interpreter-exec console "monitor reset"
                //  -interpreter-exec console "monitor halt"
                //  -interpreter-exec console "set pagination off"
                //  -gdb-set auto-solib-add on
                //  -gdb-set solib-search-path ${workspaceRoot}/build/bbc-microbit-classic-gcc/source:
                //  -environment-cd ${workspaceRoot}
                //  -file-exec-and-symbols ${workspaceRoot}/build/bbc-microbit-classic-gcc/source/microbit-dal-ext-kit-example
                //  -interpreter-exec console "show architecture"
                //  -break-insert -f main
                //  -thread-info
                //  -stack-list-frames 0 1000
                //  -exec-continue
 
                // See also https://github.com/softgraph/microbit-dal-ext-kit-example/wiki/Debugging-with-gdb-and-pyOCD-(using-VS-Code-debugger-UI)
            }
        }
    ]
}